<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MUSICSTATION">

	<!-- ============ 음악 ============== -->
	<!-- Music에 댓글 입력 -->
	<insert id="mcommentinsert" parameterType="commentVO">
		INSERT INTO COMMENTS
				(COMMENT_ID, COMMENT_CONTENT, USER_ID, MUSIC_ID, UPLOAD_DATE, TYPE )
		VALUES (COMMENT_SEQ.NEXTVAL, #{commentContent}, #{userId}, #{musicId}, 
        		 SYSDATE, 'MUSIC')
	</insert>
	
	<!-- Music에 댓글 수정 -->
	<update id="mcommentupdate" parameterType="commentVO">
		UPDATE COMMENTS
		SET COMMENT_CONTENT = #{commentContent},
			UPLOAD_DATE = SYSDATE
		WHERE COMMENT_ID = #{commentId }
	</update>
	
	<!-- Music에 댓글 삭제 -->
	<delete id="mcommentdelete" parameterType="int">
		DELETE COMMENTS
		WHERE COMMENT_ID = #{commentId }
	</delete>
	
	
	<!-- 전체 음악 목록 조회 -->
	<select id="list" resultType="musicVO">
		SELECT * FROM MUSIC ORDER BY MUSIC_ID
	</select>
	
	<!-- 음악 상세 조회 -->
	<select id="musicone" resultType="musicVO" parameterType="int">
		SELECT *
        FROM MUSIC
        WHERE MUSIC_ID= #{musicIdx }
	</select>
	
	<!-- 음악 아티스트만 조회 -->
	<select id="artist" resultType="String" parameterType="int">
		SELECT ARTIST
        FROM MUSIC
        WHERE MUSIC_ID= #{musicIdx }
	</select>
	
	<!-- 음악 조회수 조회 -->
	<select id="log" resultType="int" parameterType="int">
		SELECT COUNT(MUSIC_ID) 
        FROM MUSIC_LOG
        WHERE MUSIC_ID= #{musicId }
	</select>
	
	<!-- ============ 유저 ============== -->
	<!-- 유저 상세 조회 -->
	<select id="userone" resultType="userVO" parameterType="String">
		SELECT * 
        FROM USERS
        WHERE USER_ID= #{userId }
	</select>
	
	<!-- ============ 음악 좋아요 ============== -->
	<!-- 음악에 딸린 좋아요 수 조회 -->
	<select id="like" resultType="int" parameterType="int">
		SELECT COUNT(USER_ID) 
        FROM LIKES
        WHERE MUSIC_ID= #{musicIdx }
	</select>
	
	<!-- 좋아요 눌렀을 때 -->
	<insert id="likeclick" parameterType="likeVO">
		INSERT INTO LIKES
			(USER_ID, MUSIC_ID, TYPE, LIKE_DATE) 
		VALUES (#{userId }, #{musicId }, 'MUSIC', SYSDATE)		
	</insert>
	
	<!-- 좋아요 취소할 때 -->
	<delete id="nolike" parameterType="map">
		DELETE FROM LIKES
		WHERE USER_ID = #{userId } AND MUSIC_ID = #{musicId }
	</delete>
	
	<!-- 좋아요 여부 조회 -->
	<select id="likeone" resultType="int" parameterType="map">
		SELECT COUNT(*)
        FROM LIKES
        WHERE USER_ID = #{userId } AND MUSIC_ID= #{musicId }
	</select>
	
	<!-- ============ 플리 좋아요 ============== -->
	<!-- 플리에 딸린 좋아요 수 조회 -->
	<select id="pllike" resultType="int" parameterType="int">
		SELECT COUNT(USER_ID) 
        FROM LIKES
        WHERE PL_ID= #{plId }
	</select>
	
	<!-- 좋아요 눌렀을 때 -->
	<insert id="pllikeclick" parameterType="likeVO">
		INSERT INTO LIKES
			(USER_ID, PL_ID, TYPE, LIKE_DATE) 
		VALUES (#{userId }, #{plId }, 'PLAYLIST', SYSDATE)		
	</insert>
	
	<!-- 좋아요 취소할 때 -->
	<delete id="plnolike" parameterType="map">
		DELETE FROM LIKES
		WHERE USER_ID = #{userId } AND PL_ID = #{plId }
	</delete>
	
	<!-- 좋아요 여부 조회 -->
	<select id="pllikeone" resultType="int" parameterType="map">
		SELECT COUNT(*)
        FROM LIKES
        WHERE USER_ID = #{userId } AND PL_ID = #{plId }
	</select>
	
	
	<!-- ============ 댓글 ============== -->
	<!-- 음악에 딸린 댓글 데이터 조회 -->
	<select id="musiccommList" resultType="commentVO" parameterType="int">
		SELECT C.COMMENT_ID, C.USER_ID, C.COMMENT_CONTENT, C.UPLOAD_DATE, U.NICKNAME
		FROM COMMENTS C
		INNER JOIN USERS U
		ON C.USER_ID = U.USER_ID
		WHERE UPPER(TYPE) = 'MUSIC' AND MUSIC_ID = #{musicIdx}
		ORDER BY COMMENT_ID DESC
	</select>
	
	<!-- 음악에 딸린 댓글 개수 조회 -->
	<select id="commcount" resultType="int" parameterType="int">
		SELECT COUNT(*)
		FROM COMMENTS
		WHERE MUSIC_ID = #{musicId}
	</select>
	
	<!-- 음악에 딸린 댓글 작성자 사진 등록을 위한 조회 -->
	<select id="commpicture" resultType="String" parameterType="String">
		SELECT PICTURE
		FROM USERS 
		WHERE USER_ID= #{userId}
	</select>
	
	
	<!-- ============ 장르 ============== -->
	<!-- 음악에 딸린 장르 조회 -->
	<select id="genre" resultType="genreVO" parameterType="int">
		SELECT G.*
		FROM MUSIC M
		JOIN MUSIC_GENRE MG
		ON M.MUSIC_ID = MG.MUSIC_ID
		JOIN GENRE G
		ON MG.GENRE_ID = G.GENRE_ID
		WHERE MG.MUSIC_ID = #{musicId }
	</select>
	
	<!-- 플리에 딸린 장르 조회 -->
	<select id="plgenre" resultType="genreVO" parameterType="int">
		SELECT G.*
		FROM PLAYLIST P
		JOIN PL_GENRE PG
		ON P.PL_ID = PG.PL_ID
		JOIN GENRE G
		ON PG.GENRE_ID = G.GENRE_ID
		WHERE PG.PL_ID = #{plId }
	</select>
	
	
	<!-- ============ 플레이리스트 ============== -->
	<!-- 전체 플리 목록 조회 -->
	<select id="pllist" resultType="plVO">
		SELECT * FROM PLAYLIST ORDER BY PL_ID
	</select>
	
	<!-- 플리 상세 조회 -->
	<select id="plone" resultType="plVO" parameterType="int">
		SELECT *
        FROM PLAYLIST
        WHERE PL_ID= #{plId }
	</select>
	
	<!-- 플리 내에 음악 목록 조회 -->
	<select id="plmusic" resultType="musicVO" parameterType="int">
		SELECT M.*
		FROM MUSIC M
		JOIN PL_MUSIC PM
		ON M.MUSIC_ID = PM.MUSIC_ID
		JOIN PLAYLIST P
		ON PM.PL_ID = P.PL_ID
		WHERE P.PL_ID = #{plId }
	</select>
	
	<!-- 플리 아티스트만 조회 -->
	<select id="plartist" resultType="String" parameterType="int">
		SELECT ARTIST
        FROM PLAYLIST
        WHERE PL_ID= #{plId }
	</select>
	
	
	
</mapper>










